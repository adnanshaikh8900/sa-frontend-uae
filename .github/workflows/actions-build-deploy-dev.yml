# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: SimpleAccounts Build

on:
  push:
    branches: [ "develop" ]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}
  TAG: 1.0.1-alpha.${{ github.run_number }}

jobs:
  build:

    runs-on: ubuntu-latest
    permissions: 
      contents: read
      packages: write

    strategy:
      matrix:
        node-version: [14.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Cache dependencies
      uses: actions/cache@v2
      with:
        path: |
          **/node_modules
        key: ${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    - run: npm ci
    - run: CI=false npm run build --if-present

    # https://github.com/docker/build-push-action
    - name: Setup Docker buildx
      uses: docker/setup-buildx-action@v2

    # Login against a Docker registry except on PR
    # https://github.com/docker/login-action
    - name: Log into registry ${{ env.REGISTRY }}
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    # Extract metadata (tags, labels) for Docker
    # https://github.com/docker/metadata-action
    - name: Extract Docker metadata
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: ${{ env.TAG }}
        labels: |
          org.opencontainers.image.title=SimpleAccounts-Frontend
          org.opencontainers.image.description=SimpleAccounts frontend application
          org.opencontainers.image.vendor=Data Innovation Technologies Limited.
          org.opencontainers.image.licenses=Copyright 2022 Data Innovation Technologies Limited.

    # Build and push Docker image with Buildx (don't push on PR)
    # https://github.com/docker/build-push-action
    - name: Build and push Docker image
      id: build-and-push
      uses: docker/build-push-action@v3
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
  
  deploy-dev:
    needs: build
    runs-on: datainn-digitalocean-test-runner-set
    permissions:
      contents: read
      issues: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    - uses: azure/setup-kubectl@v3
      with:
        version: 'latest' # default is latest stable
      id: install-kubectl

    - uses: azure/setup-helm@v3
      with:
        version: 'latest' # default is latest (stable)
        token: ${{ secrets.GITHUB_TOKEN }} # only needed if version is 'latest'
      id: install-helm

    - name: Helm chart Dev Deployment
      run: |
        echo "Deploying application to following cluster..."
        kubectl cluster-info 
        echo "Test deployment scripts..."
        helm upgrade --install --values ./simpleaccounts-frontend/values.yaml --set simpleVatFrontendRelease=${{ env.TAG }},image.repository.frontend.tag=${{ env.TAG }},image.repository.frontend.imageName=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }},maindomain=dev.app.simpleaccounts.io,simpleVatHost=https://dev-api.app.simpleaccounts.io,fullnameOverride=dev-frontend,serviceAccount.name=dev-deploy-robot-frontend,ingress.hosts[0].host=dev.app.simpleaccounts.io,ingress.hosts[0].paths[0]=/*,clusterIssuer=app-simpleaccounts-io-letsencrypt-prod,'ingress.annotations.cert-manager\.io/clusterissuer'=app-simpleaccounts-io-letsencrypt-prod,ingress.tls[0].secretName=dev-frontend-app-simpleaccounts-io-tls,ingress.tls[0].hosts[0]=dev.app.simpleaccounts.io --wait --dry-run --debug --namespace dev --create-namespace dev-frontend ./simpleaccounts-frontend 
        echo "Dev Depolyment Scripts..."
        helm upgrade --install --values ./simpleaccounts-frontend/values.yaml --set simpleVatFrontendRelease=${{ env.TAG }},image.repository.frontend.tag=${{ env.TAG }},image.repository.frontend.imageName=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }},maindomain=dev.app.simpleaccounts.io,simpleVatHost=https://dev-api.app.simpleaccounts.io,fullnameOverride=dev-frontend,serviceAccount.name=dev-deploy-robot-frontend,ingress.hosts[0].host=dev.app.simpleaccounts.io,ingress.hosts[0].paths[0]=/*,clusterIssuer=app-simpleaccounts-io-letsencrypt-prod,'ingress.annotations.cert-manager\.io/clusterissuer'=app-simpleaccounts-io-letsencrypt-prod,ingress.tls[0].secretName=dev-frontend-app-simpleaccounts-io-tls,ingress.tls[0].hosts[0]=dev.app.simpleaccounts.io --wait --namespace dev --create-namespace dev-frontend ./simpleaccounts-frontend 
        
    - name: Create approval Issue for SIT
      uses: JasonEtco/create-an-issue@v2.6.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        ENVIRONMENT: SIT
        RUNNUMBER: ${{ github.run_number  }}
        COMMITSHA: ${{ github.sha }}
        TAG: ${{ env.TAG }}
      with:         
        filename: .github/deployment-approval.md