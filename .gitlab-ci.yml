stages:          # List of stages for jobs, and their order of execution
  - dev-compile
  - dev-build
  - dev-deploy
  # - SIT
  # - UAT
variables: 
  IMAGE: datainn/simpleaccounts/simpleaccounts-frontend
  TAG: latest
  ARTIFACT_PATH: ./build


build-job:       # This job runs in the build stage, which runs first.
  stage: dev-compile
  variables: 
    CI: "false"
  cache:
    key: $CI_COMMIT_REF_SLUG
    paths:
      - .npm/
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - echo "Compiling the code...!"
    - npm run build --if-present
    - echo "Compile completed."
  allow_failure: false
  artifacts:
    paths:
      - "$ARTIFACT_PATH"
    when: on_success

docker-job:   # This job runs in the test stage.
  stage: dev-build    # It only starts when the job in the build stage completes successfully.
  image: docker:20.10.16
  variables: 
    DOCKER_HOST: "tcp://docker:2376"
    DOCKER_TLS_CERTDIR: "/certs"
    DOCKER_TLS_VERIFY: 1
    DOCKER_CERT_PATH: "$DOCKER_TLS_CERTDIR/client"
  services:
    - docker:20.10.16-dind
  before_script:
    - echo "Waiting for docker to initialise..."
    - i=0; while [ "$i" -lt 12 ]; do docker info && break; sleep 5; i=$(( i + 1 )) ; done
    - echo "Docker running"
    - TAG=$VERSION_PREFIX.$SA_VERSION
    - SA_VERSION=$(($SA_VERSION+1))
    - apk add curl
    - curl --request PUT --header "PRIVATE-TOKEN:$GITLAB_API_TOKEN" "https://gitlab.datainn.io/api/v4/projects/5/variables/SA_VERSION" --form "value=$SA_VERSION"
  dependencies:
    - "build-job"
  script:
    - echo "Docker build and push..."
    - docker build -t $REGISTRY_URL/$IMAGE:$TAG .
    - echo "$REGISTRY_PASS" | docker login $REGISTRY_URL --username $REGISTRY_USER --password-stdin
    - docker push $REGISTRY_URL/$IMAGE:$TAG
    - echo "Docker image pushed"
  allow_failure: false
  rules:
    - if: $CI_PROJECT_NAMESPACE == 'datainn/simpleaccounts' && $CI_COMMIT_BRANCH == 'develop'
      when: always
    - when: never

deploy-job:      # This job runs in the deploy stage.
  stage: dev-deploy  # It only runs when *both* jobs in the test stage complete successfully.
  script:
    - echo "Deploying application to following cluster..."
    - kubectl cluster-info --kubeconfig="$KUBECONFIG_DEV"
    - echo "Test deployment scripts..."
    - helm upgrade --install --values ./simpleaccounts-frontend/values.yaml --set simpleVatFrontendRelease=$TAG,image.repository.frontend.tag=$TAG,image.repository.frontend.imageName=$REGISTRY_URL/$IMAGE,maindomain=dev.app.simpleaccounts.io,simpleVatHost=https://dev-api.app.simpleaccounts.io,fullnameOverride=dev-frontend,serviceAccount.name=dev-deploy-robot-frontend,ingress.hosts[0].host=dev.app.simpleaccounts.io,ingress.hosts[0].paths[0]=/*,clusterIssuer=app-simpleaccounts-io-letsencrypt-prod,'ingress.annotations.cert-manager\.io/clusterissuer'=app-simpleaccounts-io-letsencrypt-prod,ingress.tls[0].secretName=dev-app-simpleaccounts-io-tls,ingress.tls[0].hosts[0]=dev-api.app.simpleaccounts.io,ingress.tls[0].hosts[1]=dev.app.simpleaccounts.io --wait --dry-run --debug --namespace dev --create-namespace dev-frontend ./simpleaccounts-frontend --kubeconfig="$KUBECONFIG_DEV"
    - echo "Deployment started scripts..."
    - helm upgrade --install --values ./simpleaccounts-frontend/values.yaml --set simpleVatFrontendRelease=$TAG,image.repository.frontend.tag=$TAG,image.repository.frontend.imageName=$REGISTRY_URL/$IMAGE,maindomain=dev.app.simpleaccounts.io,simpleVatHost=https://dev-api.app.simpleaccounts.io,fullnameOverride=dev-frontend,serviceAccount.name=dev-deploy-robot-frontend,ingress.hosts[0].host=dev.app.simpleaccounts.io,ingress.hosts[0].paths[0]=/*,clusterIssuer=app-simpleaccounts-io-letsencrypt-prod,'ingress.annotations.cert-manager\.io/clusterissuer'=app-simpleaccounts-io-letsencrypt-prod,ingress.tls[0].secretName=dev-app-simpleaccounts-io-tls,ingress.tls[0].hosts[0]=dev-api.app.simpleaccounts.io,ingress.tls[0].hosts[1]=dev.app.simpleaccounts.io --wait --namespace dev --create-namespace dev-frontend ./simpleaccounts-frontend --kubeconfig="$KUBECONFIG_DEV"
    - echo "Application successfully deployed."
