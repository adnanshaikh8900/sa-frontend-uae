name: $(TeamProject)_$(Build.DefinitionName)_$(SourceBranchName)_$(Date:yyyyMMdd)$(Rev:.r)
trigger:
  branches:
    include:
      - develop

variables:
  ${{ if eq(variables['Build.SourceBranchName'], 'master') }}:
    containerRegistryConnection: 'SimpleAccountsAzureContainerRegistryConnection'
    containerRegistryName: 'simpleaccounts'
    tag: latest
  ${{ else }}:
    containerRegistryConnection: 'DataInnAzureContainerRegistryConnection'
    containerRegistryName: 'datainn'
    tag: 0.0.3-alpha-$(Build.BuildId)

  npm_config_cache: $(Pipeline.Workspace)/.npm
  docker_cashe_path: simpleaccounts-frontend-$(Build.SourceBranchName)


stages:
  - stage: ci_build_simpleaccounts
    displayName: CI Build for simpleaccounts
    pool:
      vmImage: 'ubuntu-latest'
    jobs:
      - job: build
        displayName: Build & Push simpleaccounts Application
        timeoutInMinutes: 30

        steps:
          # - task: NodeTool@0
          #   displayName: Install Node.js
          #   inputs:
          #     versionSpec: '14.x'

          # - task: CmdLine@2
          #   inputs:
          #     script: 'npm i --package-lock-only'
          #   displayName: 'Generate package-lock.json'

          # - task: Cache@2
          #   inputs:
          #     key: 'npm | "$(Agent.OS)" | package-lock.json'
          #     restoreKeys: |
          #       npm | "$(Agent.OS)"
          #     path: $(npm_config_cache)
          #   displayName: Cache npm
          # - script: npm ci
          #   displayName: npm ci

          # - task: CmdLine@2
          #   inputs:
          #     script: |
          #       npm run build
          #   displayName: 'npm build'

          - task: Cache@2
            displayName: Cache task
            inputs:
              key: 'docker | "$(Agent.OS)" | cache'
              path: $(Pipeline.Workspace)/$(docker_cashe_path)
              cacheHitVar: CACHE_RESTORED                #Variable to set to 'true' when the cache is restored

          # - script: |
          #     docker load -i $(Pipeline.Workspace)/$(docker_cashe_path)/docker-cache.tar
          #   displayName: Docker restore
          #   condition: and(not(canceled()), eq(variables.CACHE_RESTORED, 'true'))

          - task: Docker@2
            displayName: Docker Build & Push
            inputs:
              containerRegistry: $(containerRegistryConnection)
              repository: 'simpleaccounts-frontend'
              command: 'buildAndPush'
              Dockerfile: '**/Dockerfile'
              tags: |
                $(tag)

          - script: |
              mkdir -p $(Pipeline.Workspace)/$(docker_cashe_path)
              docker save -o $(Pipeline.Workspace)/$(docker_cashe_path)/docker-cache.tar $(containerRegistryName).azurecr.io/simpleaccounts-frontend:$(tag)
            displayName: Docker save
            condition: and(not(canceled()), or(failed(), ne(variables.CACHE_RESTORED, 'true')))
