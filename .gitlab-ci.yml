# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

stages:          # List of stages for jobs, and their order of execution
  - dev-compile
  - dev-build
  # - SIT
  # - UAT

build-job:       # This job runs in the build stage, which runs first.
  stage: dev-compile
  script:
    - echo "Compiling the code...!"
    - npm install
    - CI=false npm run build --if-present
    - echo "Compile completed."
  allow_failure: false
  artifacts:
    paths:
      - "./build"
    when: on_success

docker-job:   # This job runs in the test stage.
  stage: dev-build    # It only starts when the job in the build stage completes successfully.
  image: docker:20.10.16
  variables: 
    DOCKER_HOST: tcp://docker:2376
    DOCKER_TLS_CERTDIR: "/certs"
    DOCKER_TLS_VERIFY: 1
    DOCKER_CERT_PATH: "$DOCKER_TLS_CERTDIR/client"
  services:
    - docker:20.10.16-dind
  before_script:
    - echo "Waiting for docker to initialise..."
    - i=0; while [ "$i" -lt 12 ]; do docker info && break; sleep 5; i=$(( i + 1 )) ; done
    - echo "Docker running"
  dependencies:
    - "build-job"
  script:
    - echo "Docker build and push..."
    - docker build -t registry.datainn.io/datainn/simpleaccounts/simpleaccounts-frontend .
    - docker login registry.datainn.io --username $SIMPLEACCOUNTS_FRONTEND_REGISTRY_USER --password $SIMPLEACCOUNTS_FRONTEND_REGISTRY_PASS
    - docker push registry.datainn.io/datainn/simpleaccounts/simpleaccounts-frontend:latest
    - echo "Docker image pushed"
  allow_failure: false
  rules:
    - if: $CI_PROJECT_NAMESPACE == 'datainn' && $CI_COMMIT_BRANCH == 'develop'
      when: always
    - when: never

# deploy-job:      # This job runs in the deploy stage.
#   stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
#   script:
#     - echo "Deploying application..."
#     - echo "Application successfully deployed."
