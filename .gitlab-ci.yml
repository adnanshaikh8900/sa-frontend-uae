stages:          # List of stages for jobs, and their order of execution
  - npm-compile
  - npm-build
  - merge-develop
  - docker-build
  - dev-deploy
  - sit-approval
  - sit-deploy
  - prod-release-approval
  - prod-merge
  - create-prod-release
  - prod-deployment-approval
  - prod-deploy
variables: 
  REGISTRY_URL: $CI_REGISTRY
  REGISTRY_USER: $CI_REGISTRY_USER
  REGISTRY_PASS: $CI_REGISTRY_PASSWORD
  IMAGE: datainn/simpleaccounts/simpleaccounts-frontend
  TAG: $VERSION_PREFIX.$CI_PIPELINE_ID

# Cache modules in between jobs
cache:
  key: $CI_COMMIT_REF_SLUG
  paths:
    - .npm/

npm-compile-job:       # This job runs in the build stage, which runs first.
  stage: npm-compile
  script:
    - echo "Pipeline Source:$CI_PIPELINE_SOURCE"
    - CI="false"
    - export
    - echo "Compiling the code...!"
    - npm ci --cache .npm --prefer-offline
    - echo "Compile completed."
  allow_failure: false
  artifacts:
    paths:
      - "./node_modules"
    when: on_success
  rules:
    - if: $CI_PROJECT_NAMESPACE != 'datainn/simpleaccounts' && $CI_BUILD_TAG != null
      when: never
    - if: $CI_PROJECT_NAMESPACE == 'datainn/simpleaccounts' && $CI_PIPELINE_SOURCE == "merge_request_event"
      when: never
    - if: $CI_PROJECT_NAMESPACE == 'datainn/simpleaccounts' && $CI_COMMIT_BRANCH == 'develop'
      when: never
    - if: $CI_PROJECT_NAMESPACE == 'datainn/simpleaccounts' && $CI_COMMIT_BRANCH == 'master'
      when: never
    - when: on_success
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure
      - unknown_failure
      - job_execution_timeout
  
npm-build-job:       # This job runs in the build stage, which runs first.
  stage: npm-build
  variables: 
    KUBERNETES_MEMORY_REQUEST: 2Gi
    KUBERNETES_HELPER_MEMORY_REQUEST: 2Gi
  dependencies:
    - "npm-compile-job"
  script:
    - echo "Pipeline Source:$CI_PIPELINE_SOURCE"
    - CI="false"
    - echo "building the code...!"
    - npm run build
    - echo "build completed."
  allow_failure: false
  artifacts:
    paths:
      - "./build"
    when: on_success
  rules:
    - if: $CI_PROJECT_NAMESPACE != 'datainn/simpleaccounts' && $CI_BUILD_TAG != null
      when: never
    - if: $CI_PROJECT_NAMESPACE == 'datainn/simpleaccounts' && $CI_PIPELINE_SOURCE == "merge_request_event"
      when: never
    - if: $CI_PROJECT_NAMESPACE == 'datainn/simpleaccounts' && $CI_COMMIT_BRANCH == 'develop'
      when: never
    - if: $CI_PROJECT_NAMESPACE == 'datainn/simpleaccounts' && $CI_COMMIT_BRANCH == 'master'
      when: never
    - when: on_success
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure
      - unknown_failure
      - job_execution_timeout

merge-request-job:       # This job runs in the build stage, which runs first.
  stage: merge-develop
  script:
  - echo "Accepted merge request"
  - echo "Create a git tag on branch"
  - curl --request POST --header "PRIVATE-TOKEN:$GITLAB_API_TOKEN" "https://gitlab.datainn.io/api/v4/projects/${CI_PROJECT_ID}/repository/tags?tag_name={$TAG}&ref=develop&message=Version+{$TAG}"
  - echo "Created Tag $TAG"
  allow_failure: false
  artifacts:
    paths:
      - "./target"
    when: on_success
  rules:
    - if: $CI_PROJECT_NAMESPACE == 'datainn/simpleaccounts' && $CI_COMMIT_BRANCH == 'develop'
      when: on_success
    - if: $CI_PROJECT_NAMESPACE == 'datainn/simpleaccounts' && $CI_BUILD_TAG =~ '/red.sea.*/'
      when: never
    - when: never
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure
      - unknown_failure
      - job_execution_timeout

docker-build-job:   # This job runs in the test stage.
  stage: docker-build    # It only starts when the job in the build stage completes successfully.
  image: docker:20.10.16
  variables:
    DOCKER_HOST: "tcp://docker:2376"
    DOCKER_TLS_CERTDIR: "/certs"
    DOCKER_TLS_VERIFY: 1
    DOCKER_CERT_PATH: "$DOCKER_TLS_CERTDIR/client"
  services:
    - docker:20.10.16-dind
  before_script:
    - echo "Pipeline Source:$CI_PIPELINE_SOURCE"
    - echo "Waiting for docker to initialise..."
    - i=0; while [ "$i" -lt 12 ]; do docker info && break; sleep 5; i=$(( i + 1 )) ; done
    - echo "Docker running"
    - TAG=$CI_BUILD_TAG
  dependencies:
    - "npm-build-job"
  script:
    - echo "Docker build and push..."
    - docker build -t $REGISTRY_URL/$IMAGE:$TAG .
    - echo "$REGISTRY_PASS" | docker login $REGISTRY_URL --username $REGISTRY_USER --password-stdin
    - docker push $REGISTRY_URL/$IMAGE:$TAG
    - echo "Docker image pushed"
    - echo $TAG
  allow_failure: false
  rules:
    - if: $CI_PROJECT_NAMESPACE == 'datainn/simpleaccounts' && $CI_BUILD_TAG != null
      when: on_success
    - if: $CI_PROJECT_NAMESPACE == 'datainn/simpleaccounts' && $CI_BUILD_TAG =~ '/red.sea.*/'
      when: on_success
    - when: never
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure
      - unknown_failure
      - job_execution_timeout

dev-deploy-job:      # This job runs in the deploy stage.
  stage: dev-deploy  # It only runs when *both* jobs in the test stage complete successfully.
  dependencies:
    - "docker-build-job"
  before_script:
    - echo "Pipeline Source:$CI_PIPELINE_SOURCE"
    - kubectl config use-context datainn/k8s:k8s-dev
    # - TAG=$(< ./tag.txt)
    - echo $TAG
  script:
    - echo "Deploying application to following cluster..."
    - kubectl cluster-info 
    - echo "Test deployment scripts..."
    - helm upgrade --install --values ./simpleaccounts-frontend/values.yaml --set simpleVatFrontendRelease=$TAG,image.repository.frontend.tag=$TAG,image.repository.frontend.imageName=$REGISTRY_URL/$IMAGE,maindomain=dev.app.simpleaccounts.io,simpleVatHost=https://dev-api.app.simpleaccounts.io,fullnameOverride=dev-frontend,serviceAccount.name=dev-deploy-robot-frontend,ingress.hosts[0].host=dev.app.simpleaccounts.io,ingress.hosts[0].paths[0]=/*,clusterIssuer=app-simpleaccounts-io-letsencrypt-prod,'ingress.annotations.cert-manager\.io/clusterissuer'=app-simpleaccounts-io-letsencrypt-prod,ingress.tls[0].secretName=dev-app-simpleaccounts-io-tls,ingress.tls[0].hosts[0]=dev-api.app.simpleaccounts.io,ingress.tls[0].hosts[1]=dev.app.simpleaccounts.io --wait --dry-run --debug --namespace dev --create-namespace dev-frontend ./simpleaccounts-frontend 
    - echo "Deployment started scripts..."
    - helm upgrade --install --values ./simpleaccounts-frontend/values.yaml --set simpleVatFrontendRelease=$TAG,image.repository.frontend.tag=$TAG,image.repository.frontend.imageName=$REGISTRY_URL/$IMAGE,maindomain=dev.app.simpleaccounts.io,simpleVatHost=https://dev-api.app.simpleaccounts.io,fullnameOverride=dev-frontend,serviceAccount.name=dev-deploy-robot-frontend,ingress.hosts[0].host=dev.app.simpleaccounts.io,ingress.hosts[0].paths[0]=/*,clusterIssuer=app-simpleaccounts-io-letsencrypt-prod,'ingress.annotations.cert-manager\.io/clusterissuer'=app-simpleaccounts-io-letsencrypt-prod,ingress.tls[0].secretName=dev-app-simpleaccounts-io-tls,ingress.tls[0].hosts[0]=dev-api.app.simpleaccounts.io,ingress.tls[0].hosts[1]=dev.app.simpleaccounts.io --wait --namespace dev --create-namespace dev-frontend ./simpleaccounts-frontend 
    - echo "Application successfully deployed."
  resource_group: dev
  environment:
    name: Development
    url: https://dev.app.simpleaccounts.io
    action: start
  allow_failure: false
  rules:
    - if: $CI_PROJECT_NAMESPACE == 'datainn/simpleaccounts' && $CI_BUILD_TAG =~ '/1.0.0-alpha.*/'
      when: on_success
    - when: never
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure
      - unknown_failure
      - job_execution_timeout

approve-sit-deployment-job:
  stage: sit-approval
  script:
    - echo "Pipeline Source:$CI_PIPELINE_SOURCE"
    - echo "Approve SIT Deployment"
  resource_group: test
  allow_failure: false
  rules:
    - if: $CI_PROJECT_NAMESPACE == 'datainn/simpleaccounts' && $CI_BUILD_TAG =~ '/1.0.0-alpha.*/'
      when: manual
    - when: never
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure
      - unknown_failure
      - job_execution_timeout

sit1-deploy-job:      # This job runs in the deploy stage.
  stage: sit-deploy  # It only runs when *both* jobs in the test stage complete successfully.
  dependencies:
    - "docker-build-job"
  before_script:
    - echo "Pipeline Source:$CI_PIPELINE_SOURCE"
    - kubectl config use-context datainn/k8s:k8s-dev
    # - TAG=$(< ./tag.txt)
    - echo $TAG
  script:
    - echo "Deploying application to following cluster..."
    - kubectl cluster-info 
    - echo "Test deployment scripts..."
    - helm upgrade --install --values ./simpleaccounts-frontend/values.yaml --set simpleVatFrontendRelease=$TAG,image.repository.frontend.tag=$TAG,image.repository.frontend.imageName=$REGISTRY_URL/$IMAGE,maindomain=sit1.app.simpleaccounts.io,simpleVatHost=https://sit1-api.app.simpleaccounts.io,fullnameOverride=sit1-frontend,serviceAccount.name=sit1-deploy-robot-frontend,ingress.hosts[0].host=sit1.app.simpleaccounts.io,ingress.hosts[0].paths[0]=/*,clusterIssuer=app-simpleaccounts-io-letsencrypt-prod,'ingress.annotations.cert-manager\.io/clusterissuer'=app-simpleaccounts-io-letsencrypt-prod,ingress.tls[0].secretName=sit1-app-simpleaccounts-io-tls,ingress.tls[0].hosts[0]=sit1-api.app.simpleaccounts.io,ingress.tls[0].hosts[1]=sit1.app.simpleaccounts.io --wait --dry-run --debug --namespace sit1 --create-namespace sit1-frontend ./simpleaccounts-frontend 
    - echo "Deployment started scripts..."
    - helm upgrade --install --values ./simpleaccounts-frontend/values.yaml --set simpleVatFrontendRelease=$TAG,image.repository.frontend.tag=$TAG,image.repository.frontend.imageName=$REGISTRY_URL/$IMAGE,maindomain=sit1.app.simpleaccounts.io,simpleVatHost=https://sit1-api.app.simpleaccounts.io,fullnameOverride=sit1-frontend,serviceAccount.name=sit1-deploy-robot-frontend,ingress.hosts[0].host=sit1.app.simpleaccounts.io,ingress.hosts[0].paths[0]=/*,clusterIssuer=app-simpleaccounts-io-letsencrypt-prod,'ingress.annotations.cert-manager\.io/clusterissuer'=app-simpleaccounts-io-letsencrypt-prod,ingress.tls[0].secretName=sit1-app-simpleaccounts-io-tls,ingress.tls[0].hosts[0]=sit1-api.app.simpleaccounts.io,ingress.tls[0].hosts[1]=sit1.app.simpleaccounts.io --wait --namespace sit1 --create-namespace sit1-frontend ./simpleaccounts-frontend 
    - echo "Application successfully deployed."
  resource_group: SIT1
  environment:
    name: SIT1
    url: https://sit1.app.simpleaccounts.io
    action: start
  allow_failure: false
  rules:
    - if: $CI_PROJECT_NAMESPACE == 'datainn/simpleaccounts' && $CI_BUILD_TAG =~ '/1.0.0-alpha.*/'
      when: on_success
    - when: never
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure
      - unknown_failure
      - job_execution_timeout

sit2-deploy-job:      # This job runs in the deploy stage.
  stage: sit-deploy  # It only runs when *both* jobs in the test stage complete successfully.
  dependencies:
    - "docker-build-job"
  before_script:
    - echo "Pipeline Source:$CI_PIPELINE_SOURCE"
    - kubectl config use-context datainn/k8s:k8s-dev
    # - TAG=$(< ./tag.txt)
    - echo $TAG
  script:
    - echo "Deploying application to following cluster..."
    - kubectl cluster-info 
    - echo "Test deployment scripts..."
    - helm upgrade --install --values ./simpleaccounts-frontend/values.yaml --set simpleVatFrontendRelease=$TAG,image.repository.frontend.tag=$TAG,image.repository.frontend.imageName=$REGISTRY_URL/$IMAGE,maindomain=sit2.app.simpleaccounts.io,simpleVatHost=https://sit2-api.app.simpleaccounts.io,fullnameOverride=sit2-frontend,serviceAccount.name=sit2-deploy-robot-frontend,ingress.hosts[0].host=sit2.app.simpleaccounts.io,ingress.hosts[0].paths[0]=/*,clusterIssuer=app-simpleaccounts-io-letsencrypt-prod,'ingress.annotations.cert-manager\.io/clusterissuer'=app-simpleaccounts-io-letsencrypt-prod,ingress.tls[0].secretName=sit2-app-simpleaccounts-io-tls,ingress.tls[0].hosts[0]=sit2-api.app.simpleaccounts.io,ingress.tls[0].hosts[1]=sit2.app.simpleaccounts.io --wait --dry-run --debug --namespace sit2 --create-namespace sit2-frontend ./simpleaccounts-frontend 
    - echo "Deployment started scripts..."
    - helm upgrade --install --values ./simpleaccounts-frontend/values.yaml --set simpleVatFrontendRelease=$TAG,image.repository.frontend.tag=$TAG,image.repository.frontend.imageName=$REGISTRY_URL/$IMAGE,maindomain=sit2.app.simpleaccounts.io,simpleVatHost=https://sit2-api.app.simpleaccounts.io,fullnameOverride=sit2-frontend,serviceAccount.name=sit2-deploy-robot-frontend,ingress.hosts[0].host=sit2.app.simpleaccounts.io,ingress.hosts[0].paths[0]=/*,clusterIssuer=app-simpleaccounts-io-letsencrypt-prod,'ingress.annotations.cert-manager\.io/clusterissuer'=app-simpleaccounts-io-letsencrypt-prod,ingress.tls[0].secretName=sit2-app-simpleaccounts-io-tls,ingress.tls[0].hosts[0]=sit2-api.app.simpleaccounts.io,ingress.tls[0].hosts[1]=sit2.app.simpleaccounts.io --wait --namespace sit2 --create-namespace sit2-frontend ./simpleaccounts-frontend 
    - echo "Application successfully deployed."
  resource_group: SIT2
  environment:
    name: SIT2
    url: https://sit2.app.simpleaccounts.io
    action: start
  allow_failure: false
  rules:
    - if: $CI_PROJECT_NAMESPACE == 'datainn/simpleaccounts' && $CI_BUILD_TAG =~ '/1.0.0-alpha.*/'
      when: on_success
    - when: never
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure
      - unknown_failure
      - job_execution_timeout

sit-reports-deploy-job:      # This job runs in the deploy stage.
  stage: sit-deploy  # It only runs when *both* jobs in the test stage complete successfully.
  dependencies:
    - "docker-build-job"
  before_script:
    - echo "Pipeline Source:$CI_PIPELINE_SOURCE"
    - kubectl config use-context datainn/k8s:k8s-dev
    # - TAG=$(< ./tag.txt)
    - echo $TAG
  script:
    - echo "Deploying application to following cluster..."
    - kubectl cluster-info 
    - echo "Test deployment scripts..."
    - helm upgrade --install --values ./simpleaccounts-frontend/values.yaml --set simpleVatFrontendRelease=$TAG,image.repository.frontend.tag=$TAG,image.repository.frontend.imageName=$REGISTRY_URL/$IMAGE,maindomain=sit-reports.app.simpleaccounts.io,simpleVatHost=https://sit-reports-api.app.simpleaccounts.io,fullnameOverride=sit-reports-frontend,serviceAccount.name=sit-reports-deploy-robot-frontend,ingress.hosts[0].host=sit-reports.app.simpleaccounts.io,ingress.hosts[0].paths[0]=/*,clusterIssuer=app-simpleaccounts-io-letsencrypt-prod,'ingress.annotations.cert-manager\.io/clusterissuer'=app-simpleaccounts-io-letsencrypt-prod,ingress.tls[0].secretName=sit-reports-app-simpleaccounts-io-tls,ingress.tls[0].hosts[0]=sit-reports-api.app.simpleaccounts.io,ingress.tls[0].hosts[1]=sit-reports.app.simpleaccounts.io --wait --dry-run --debug --namespace sit-reports --create-namespace sit-reports-frontend ./simpleaccounts-frontend 
    - echo "Deployment started scripts..."
    - helm upgrade --install --values ./simpleaccounts-frontend/values.yaml --set simpleVatFrontendRelease=$TAG,image.repository.frontend.tag=$TAG,image.repository.frontend.imageName=$REGISTRY_URL/$IMAGE,maindomain=sit-reports.app.simpleaccounts.io,simpleVatHost=https://sit-reports-api.app.simpleaccounts.io,fullnameOverride=sit-reports-frontend,serviceAccount.name=sit-reports-deploy-robot-frontend,ingress.hosts[0].host=sit-reports.app.simpleaccounts.io,ingress.hosts[0].paths[0]=/*,clusterIssuer=app-simpleaccounts-io-letsencrypt-prod,'ingress.annotations.cert-manager\.io/clusterissuer'=app-simpleaccounts-io-letsencrypt-prod,ingress.tls[0].secretName=sit-reports-app-simpleaccounts-io-tls,ingress.tls[0].hosts[0]=sit-reports-api.app.simpleaccounts.io,ingress.tls[0].hosts[1]=sit-reports.app.simpleaccounts.io --wait --namespace sit-reports --create-namespace sit-reports-frontend ./simpleaccounts-frontend 
    - echo "Application successfully deployed."
  resource_group: SIT-Reports
  environment:
    name: SIT-Reports
    url: https://sit-reports.app.simpleaccounts.io
    action: start
  allow_failure: false
  rules:
    - if: $CI_PROJECT_NAMESPACE == 'datainn/simpleaccounts' && $CI_BUILD_TAG =~ '/1.0.0-alpha.*/'
      when: on_success
    - when: never
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure
      - unknown_failure
      - job_execution_timeout

approve-prod-release-job:
  stage: prod-release-approval
  dependencies:
    - "docker-build-job"
  script:
    - export
    - echo "Pipeline Source:$CI_PIPELINE_SOURCE"
    - echo "Approve PROD Release"
  resource_group: prod-release
  allow_failure: false
  rules:
    - if: $CI_PROJECT_NAMESPACE == 'datainn/simpleaccounts' && $CI_BUILD_TAG =~ '/1.0.0-alpha.*/'
      when: manual
    - when: never
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure
      - unknown_failure
      - job_execution_timeout

prod-merge-job:
  stage: prod-merge
  dependencies:
    - "docker-build-job"
  script:
    - export
    - echo "Pipeline Source:$CI_PIPELINE_SOURCE"
    - echo "Merge a $TAG to master branch"
    - TAG=$CI_BUILD_TAG
    - echo $TAG
    - curl --request POST --header "PRIVATE-TOKEN:$GITLAB_API_TOKEN" "https://gitlab.datainn.io/api/v4/projects/${CI_PROJECT_ID}/repository/branches?branch=${CI_COMMIT_REF_NAME}&ref=${CI_COMMIT_SHA}"
    - curl --header "Content-Type:application/json" --header "PRIVATE-TOKEN:$GITLAB_API_TOKEN" --data "{ \"id\":${CI_PROJECT_ID}, \"source_branch\":\"${CI_COMMIT_REF_NAME}\", \"target_project_id\":${CI_PROJECT_ID}, \"target_branch\":\"master\", \"squash\":true, \"remove_source_branch\":true, \"title\":\"Simple Accounts Production Release ${CI_COMMIT_REF_NAME}\", \"assignee_id\":\"${GITLAB_USER_ID}\" }" --request POST "https://gitlab.datainn.io/api/v4/projects/${CI_PROJECT_ID}/merge_requests" 
  resource_group: prod-release
  allow_failure: false
  rules:
    - if: $CI_PROJECT_NAMESPACE == 'datainn/simpleaccounts' && $CI_BUILD_TAG =~ '/1.0.0-alpha.*/'
      when: on_success
    - when: never
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure
      - unknown_failure
      - job_execution_timeout

create-prod-release-job:
  stage: create-prod-release
  script:
    - export
    - echo "Pipeline Source:$CI_PIPELINE_SOURCE"
    - echo "Approve PROD Deployment"
    - NEXT_VERSION=$(($SA_VERSION+1))
    - curl --request PUT --header "PRIVATE-TOKEN:$GITLAB_API_TOKEN" "https://gitlab.datainn.io/api/v4/projects/${CI_PROJECT_ID}/variables/SA_VERSION" --form "value="$NEXT_VERSION
    - PROD_TAG=$PROD_VERSION_PREFIX.$SA_VERSION
    - curl --header 'Content-Type:application/json' --header "PRIVATE-TOKEN:$GITLAB_API_TOKEN" --data "{ \"name\":\"SimpleAccounts Backend Release Prod:$PROD_TAG\", \"tag_name\":\"$PROD_TAG\", \"ref\":\"$CI_COMMIT_SHA\", \"description\":\"SimpleAccounts backend new release with Production Version:$PROD_TAG and Corresponding Development/Test Version:$TAG\", \"assets\":{ \"links\":[{ \"name\":\"hoge\", \"url\":\"https://google.com\", \"filepath\":\"/binaries/linux-amd64\", \"link_type\":\"other\" }] } }" --request POST "https://gitlab.datainn.io/api/v4/projects/${CI_PROJECT_ID}/releases"
  resource_group: prod
  allow_failure: false
  rules:
    - if: $CI_PROJECT_NAMESPACE == 'datainn/simpleaccounts' && $CI_COMMIT_BRANCH == 'master'
      when: on_success
    - when: never
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure
      - unknown_failure
      - job_execution_timeout

approve-prod-deployment-job:
  stage: prod-deployment-approval
  script:
    - echo "Pipeline Source:$CI_PIPELINE_SOURCE"
    - echo "Approve PROD Deployment"
  resource_group: prod
  allow_failure: false
  rules:
    - if: $CI_PROJECT_NAMESPACE == 'datainn/simpleaccounts' && $CI_BUILD_TAG =~ '/red.sea.*/'
      when: manual
    - when: never
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure
      - unknown_failure
      - job_execution_timeout

prod-deploy-job:      # This job runs in the deploy stage.
  stage: prod-deploy  # It only runs when *both* jobs in the test stage complete successfully.
  dependencies:
    - "docker-build-job"
  before_script:
    - export
    - echo "Pipeline Source:$CI_PIPELINE_SOURCE"
    - kubectl config use-context datainn/k8s:k8s-prod
    - TAG=$CI_BUILD_TAG
    - echo $TAG
  script:
    - echo "Deploying application to following cluster..."
    - kubectl cluster-info
    - echo "Test deployment scripts..."
    - helm upgrade --install --values ./simpleaccounts-frontend/values.yaml --set simpleVatFrontendRelease=$TAG,image.repository.frontend.tag=$TAG,image.repository.frontend.imageName=$REGISTRY_URL/$IMAGE,maindomain=sandbox.ae.simpleaccounts.io,simpleVatHost=https://sandbox-api.ae.simpleaccounts.io,fullnameOverride=sandbox-frontend,serviceAccount.name=sandbox-deploy-robot-frontend,ingress.hosts[0].host=sandbox.ae.simpleaccounts.io,ingress.hosts[0].paths[0]=/*,clusterIssuer=simpleaccounts-io-letsencrypt-prod,'ingress.annotations.cert-manager\.io/clusterissuer'=simpleaccounts-io-letsencrypt-prod,ingress.tls[0].secretName=sandbox-ae-simpleaccounts-io-tls,ingress.tls[0].hosts[0]=sandbox-api.ae.simpleaccounts.io,ingress.tls[0].hosts[1]=sandbox.ae.simpleaccounts.io --wait --dry-run --debug --namespace sandbox --create-namespace sandbox-frontend ./simpleaccounts-frontend 
    - echo "Deployment started scripts..."
    - helm upgrade --install --values ./simpleaccounts-frontend/values.yaml --set simpleVatFrontendRelease=$TAG,image.repository.frontend.tag=$TAG,image.repository.frontend.imageName=$REGISTRY_URL/$IMAGE,maindomain=sandbox.ae.simpleaccounts.io,simpleVatHost=https://sandbox-api.ae.simpleaccounts.io,fullnameOverride=sandbox-frontend,serviceAccount.name=sandbox-deploy-robot-frontend,ingress.hosts[0].host=sandbox.ae.simpleaccounts.io,ingress.hosts[0].paths[0]=/*,clusterIssuer=simpleaccounts-io-letsencrypt-prod,'ingress.annotations.cert-manager\.io/clusterissuer'=simpleaccounts-io-letsencrypt-prod,ingress.tls[0].secretName=sandbox-ae-simpleaccounts-io-tls,ingress.tls[0].hosts[0]=sandbox-api.ae.simpleaccounts.io,ingress.tls[0].hosts[1]=sandbox.ae.simpleaccounts.io --wait --namespace sandbox --create-namespace sandbox-frontend ./simpleaccounts-frontend 
    - echo "Application successfully deployed."
  resource_group: prod
  environment:
    name: prod
    url: https://sandbox.ae.simpleaccounts.io
    action: start
  allow_failure: false
  rules:
    - if: $CI_PROJECT_NAMESPACE == 'datainn/simpleaccounts' && $CI_BUILD_TAG =~ '/red.sea.*/'
      when: on_success
    - when: never
  retry:
    max: 2
    when:
      - runner_system_failure
      - stuck_or_timeout_failure
      - unknown_failure
      - job_execution_timeout