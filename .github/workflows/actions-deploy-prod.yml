# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: SimpleAccounts Frontend Deploy

on:
  pull_request:
    types:
      - closed
    branches:
      - master
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}
  TAG: blue.berry.${{ github.run_number }}

jobs:  

  build:
    runs-on: ubuntu-latest
    permissions: 
      contents: write
      packages: write

    strategy:
      matrix:
        node-version: [14.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Delete remote commit-promotion-develop branch
      run: |
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        git config --global user.name "github-actions[bot]" 
        git push origin --delete commit-promotion-develop

    - name: Create a release
      uses: ncipollo/release-action@v1
      with:
        body: "Production release ${{ env.TAG }}"
        tag: "${{ env.TAG }}"
        generateReleaseNotes: "true"
        allowUpdates: "true"

    - name: Cache dependencies
      uses: actions/cache@v2
      with:
        path: |
          **/node_modules
        key: ${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    - run: npm ci
    - run: CI=false npm run build --if-present

    # Install the cosign tool except on PR
    # https://github.com/sigstore/cosign-installer
  #     - name: Install Cosign
  #       uses: sigstore/cosign-installer@main
  #     - name: Check install!
  #       run: cosign version

    # https://github.com/docker/build-push-action
    - name: Setup Docker buildx
      uses: docker/setup-buildx-action@v2

    # Login against a Docker registry except on PR
    # https://github.com/docker/login-action
    - name: Log into registry ${{ env.REGISTRY }}
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    # Extract metadata (tags, labels) for Docker
    # https://github.com/docker/metadata-action
    - name: Extract Docker metadata
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: ${{ env.TAG }}
        labels: |
          org.opencontainers.image.title=SimpleAccounts-Frontend
          org.opencontainers.image.description=SimpleAccounts frontend application
          org.opencontainers.image.vendor=Data Innovation Technologies Limited.
          org.opencontainers.image.licenses=Copyright 2022 Data Innovation Technologies Limited.

    # Build and push Docker image with Buildx (don't push on PR)
    # https://github.com/docker/build-push-action
    - name: Build and push Docker image
      id: build-and-push
      uses: docker/build-push-action@v3
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}, ${{ env.REGISTRY }}/SimpleAccounts/simpleaccounts-frontend-uae:latest, ${{ env.REGISTRY }}/SimpleAccounts/simpleaccounts-frontend-uae:${{ env.TAG }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    # Sign the resulting Docker image digest except on PRs.
    # This will only write to the public Rekor transparency log when the Docker
    # repository is public to avoid leaking data.  If you would like to publish
    # transparency data even for private images, pass --force to cosign below.
    # https://github.com/sigstore/cosign
  #     - name: Sign the published Docker image
  #       if: ${{ github.event_name != 'pull_request' }}
  #       env:
  #         COSIGN_EXPERIMENTAL: "true"
  #       # This step uses the identity token to provision an ephemeral certificate
  #       # against the sigstore community Fulcio instance.
  #       run: cosign sign ${{ steps.meta.outputs.tags }}@${{ steps.build-and-push.outputs.digest }}

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push
      uses: docker/build-push-action@v4
      with:
        push: true
        tags: simpleaccounts/simpleaccounts-frontend-uae:latest,simpleaccounts/simpleaccounts-frontend-uae:${{ env.TAG }}

  deploy-PROD:
    needs: [build]
    runs-on: datainn-digitalocean-test-runner-set
    permissions:
      contents: read
      issues: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - uses: azure/setup-kubectl@v3
      with:
        version: 'latest' # default is latest stable
      id: install-kubectl

    - uses: azure/setup-helm@v3
      with:
        version: 'latest' # default is latest (stable)
        token: ${{ secrets.GITHUB_TOKEN }} # only needed if version is 'latest'
      id: install-helm

    - name: Helm chart PROD DIT Deployment
      run: |
        echo "Deploying application to following cluster..."
        kubectl cluster-info
        echo "Test deployment scripts..."
        helm upgrade --install --values ./simpleaccounts-frontend/values.yaml --set simpleVatFrontendRelease=$TAG,image.repository.frontend.tag=$TAG,image.repository.frontend.imageName=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }},maindomain=dit.app.simpleaccounts.io,simpleVatHost=https://dit-api.app.simpleaccounts.io,fullnameOverride=dit-frontend,serviceAccount.name=dit-deploy-robot-frontend,ingress.hosts[0].host=dit.app.simpleaccounts.io,ingress.hosts[0].paths[0]=/*,clusterIssuer=app-simpleaccounts-io-letsencrypt-prod,'ingress.annotations.cert-manager\.io/clusterissuer'=app-simpleaccounts-io-letsencrypt-prod,ingress.tls[0].secretName=dit-app-simpleaccounts-io-tls,ingress.tls[0].hosts[0]=dit-api.app.simpleaccounts.io,ingress.tls[0].hosts[1]=dit.app.simpleaccounts.io --wait --dry-run --debug --namespace dit --create-namespace dit-frontend ./simpleaccounts-frontend 
        echo "Deployment started scripts..."
        helm upgrade --install --values ./simpleaccounts-frontend/values.yaml --set simpleVatFrontendRelease=$TAG,image.repository.frontend.tag=$TAG,image.repository.frontend.imageName=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }},maindomain=dit.app.simpleaccounts.io,simpleVatHost=https://dit-api.app.simpleaccounts.io,fullnameOverride=dit-frontend,serviceAccount.name=dit-deploy-robot-frontend,ingress.hosts[0].host=dit.app.simpleaccounts.io,ingress.hosts[0].paths[0]=/*,clusterIssuer=app-simpleaccounts-io-letsencrypt-prod,'ingress.annotations.cert-manager\.io/clusterissuer'=app-simpleaccounts-io-letsencrypt-prod,ingress.tls[0].secretName=dit-app-simpleaccounts-io-tls,ingress.tls[0].hosts[0]=dit-api.app.simpleaccounts.io,ingress.tls[0].hosts[1]=dit.app.simpleaccounts.io --wait --namespace dit --create-namespace dit-frontend ./simpleaccounts-frontend 
        echo "Application successfully deployed."

        