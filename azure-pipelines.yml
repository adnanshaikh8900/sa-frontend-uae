name: $(TeamProject)_$(Build.DefinitionName)_$(SourceBranchName)_$(Date:yyyyMMdd)$(Rev:.r)
trigger:
  branches:
    include:
      - master
      - develop

variables:
  ${{ if eq(variables['Build.SourceBranchName'], 'master') }}:
    containerRegistryName: 'simpleaccounts'
    tag: latest
  ${{ else }}:
    containerRegistryName: 'datainn'
    tag: 0.0.3-alpha-$(Build.BuildId)
  ${{ if eq(variables['Build.SourceBranchName'], 'master') }}:
    containerRegistryConnection: 'SimpleAccountsAzureContainerRegistryConnection'
  ${{ else }}:
    containerRegistryConnection: 'DataInnAzureContainerRegistryConnection'
  npm_config_cache: $(Pipeline.Workspace)/.npm
  

stages:
  - stage: ci_build_simpleaccounts
    displayName: CI Build for simpleaccounts
    pool:
      vmImage: 'ubuntu-latest'
    jobs:
      - job: build
        displayName: Build & Push simpleaccounts Application
        timeoutInMinutes: 30

        steps:
          - task: CmdLine@2
            inputs:
              script: 'npm i --package-lock-only'

          - task: Cache@2
            inputs:
              key: 'npm | "$(Agent.OS)" | package-lock.json'
              restoreKeys: |
                npm | "$(Agent.OS)"
              path: $(npm_config_cache)
            displayName: Cache npm
          - script: npm ci

          - task: NodeTool@0
            inputs:
              versionSpec: '10.x'
            displayName: 'Install Node.js'

          - script: |
              npm rebuild node-sass
              npm run build
            displayName: 'npm install and build'

          - task: Cache@2
            displayName: Cache task
            inputs:
              key: 'docker | "$(Agent.OS)" | cache'
              path: $(Pipeline.Workspace)/simpleaccounts-frontend-docker
              cacheHitVar: CACHE_RESTORED                #Variable to set to 'true' when the cache is restored

          - script: |
              docker load -i $(Pipeline.Workspace)/simpleaccounts-frontend-docker/simpleaccounts-frontend-docker-cache.tar
            displayName: Docker restore
            condition: and(not(canceled()), eq(variables.CACHE_RESTORED, 'true'))

          - task: Docker@2
            displayName: Docker Build & Push
            inputs:
              containerRegistry: $(containerRegistryConnection)
              repository: 'simpleaccounts-frontend'
              command: 'buildAndPush'
              Dockerfile: '**/Dockerfile'
              tags: |
                $(tag)

          - script: |
              mkdir -p $(Pipeline.Workspace)/simpleaccounts-frontend-docker
              docker save -o $(Pipeline.Workspace)/simpleaccounts-frontend-docker/simpleaccounts-frontend-docker-cache.tar $(containerRegistryName).azurecr.io/simpleaccounts-frontend:0.0.3-alpha-$(Build.BuildId)
            displayName: Docker save
            condition: and(not(canceled()), or(failed(), ne(variables.CACHE_RESTORED, 'true')))

